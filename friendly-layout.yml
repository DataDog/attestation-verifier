expires: "2024-10-10T12:23:22Z"
actors: # looked up when generating and signing layout to fill in actual public keys
  - "github"
  - "builder-1"
  - "builder-2"
  - "npm"
steps:
  - name: "clone"
    template: "git-checkout" # identifies a link must be generated, it's usually the first step so no materials, products are a create foo/* rule and disallow *
    with:
      project-name: "foo"
    actors:
      - "builder-1"
      - "builder-2"
  - name: "test"
    template: "test-run" # declares a test-result predicate, as it comes after a checkout with a link, it matches materials with products of clone, also sets expected attributes to no failed tests
    actors:
      - "builder-1"
      - "builder-2"
  - name: "review"
    template: "github-code-review" # declares a CR predicate, as it comes after a checkout with a link, it matches materials with products of clone, also sets expected attributes to CR approval if applicable
    with:
      github-users: # mapped to github user constraints in the VCS CR predicate
        - "alice"
        - "bob"
        - "carol"
      github-threshold: 2
    actors:
      - "github"
  - name: "build"
    template: "slsa-level-2" # declares provenance predicate, 'with' specifies expectations on the fields, materials matched to prior checkout
    with:
      platform: "github-actions" # well known slsa compliant builder, corresponding field constraints automatically set
      product: "dist/"
    actors:
      - "builder-1" # hosted builders, keys loaded as secrets, could use sigstore identities instead
      - "builder-2"
    threshold: 2 # not sure how much use this is with github actions but perhaps the self hosted runners are maintained distinctly?
  - name: "deploy"
    template: "npm-publish" # declares publish attestation, when used after provenance it knows to use that as input
    with:
      npm-package-name: "foo"
      npm-scope: "fooproject"
    actors:
      - "npm"
